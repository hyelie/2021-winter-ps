// 2 x n 타일링

#include <string>
#include <vector>

using namespace std;

int MOD = 1000000007;

int solution(int n) {
    int f = 1, s = 2, temp;
    if(n == 1) return f;
    n--;
    while(n--){
        temp = s;
        s = (f % MOD + s % MOD) % MOD;
        f = temp;
    }
    return f;
}

/*

1개짜리 n개 채우는 방법 = nPn (1)
2개짜리 1개, 1개짜리 n-2개 = (n-1)! / (n-2)!
2개짜리 2개, 1개짜리 n-4개 = (n-2)! / (n-4)!
아 이거 중복조합인데

1개 : 1 (1개짜리 1개)
2개 : 2 (1개짜리 2개 / 2개짜리 1개)
3개 : 3 (1개짜리 3개 / 1개짜리 1개 + 2개짜리 1개)
4개 : 5 (1개짜리 4개 / 1개짜리 2개 + 2개짜리 1개 / 1개짜리 0개 + 2개짜리 2개)
5개 : 8 (1개짜리 5개 / 1개짜리 3개 + 2개짜리 1개 / 1개짜리 1개 + 2개짜리 2개)

이렇게 되는 이유는..?
i-2개짜리에서 2개짜리 1개 더하는 방법(가로로 눕힌) + i-1개짜리에서 1개짜리 1개 더하는 방법(세로로 세운)
따라서 dp[i] = dp[i-1] + dp[i-2]

*/